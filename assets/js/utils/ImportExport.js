/**
 * Import/Export Utility for checklists
 */
export class ImportExport {
    /**\n     * Export checklist to JSON file\n     */\n    static async exportChecklist(checklist, filename) {\n        try {\n            // Prepare export data\n            const exportData = {\n                version: '1.0',\n                exportedAt: new Date().toISOString(),\n                checklist: {\n                    title: checklist.title,\n                    description: checklist.description || '',\n                    sections: checklist.sections || [],\n                    tags: checklist.tags || [],\n                    metadata: {\n                        totalItems: checklist.total_items || 0,\n                        completedItems: checklist.completed_items || 0,\n                        createdAt: checklist.created_at,\n                        updatedAt: checklist.updated_at\n                    }\n                }\n            };\n            \n            // Create and download file\n            const blob = new Blob([JSON.stringify(exportData, null, 2)], {\n                type: 'application/json'\n            });\n            \n            const url = URL.createObjectURL(blob);\n            const a = document.createElement('a');\n            a.href = url;\n            a.download = filename || `${this.sanitizeFilename(checklist.title)}.json`;\n            \n            document.body.appendChild(a);\n            a.click();\n            document.body.removeChild(a);\n            \n            URL.revokeObjectURL(url);\n            \n            return true;\n        } catch (error) {\n            console.error('Export failed:', error);\n            throw new Error('Failed to export checklist');\n        }\n    }\n    \n    /**\n     * Import checklist from JSON file\n     */\n    static async importChecklist() {\n        return new Promise((resolve, reject) => {\n            const input = document.createElement('input');\n            input.type = 'file';\n            input.accept = '.json';\n            \n            input.onchange = async (e) => {\n                const file = e.target.files[0];\n                if (!file) {\n                    reject(new Error('No file selected'));\n                    return;\n                }\n                \n                try {\n                    const text = await file.text();\n                    const data = JSON.parse(text);\n                    \n                    // Validate import data\n                    const validatedData = this.validateImportData(data);\n                    resolve(validatedData);\n                } catch (error) {\n                    reject(new Error('Invalid file format or corrupted data'));\n                }\n            };\n            \n            input.onerror = () => {\n                reject(new Error('File reading failed'));\n            };\n            \n            input.click();\n        });\n    }\n    \n    /**\n     * Export multiple checklists\n     */\n    static async exportMultipleChecklists(checklists, filename = 'checklists-export.json') {\n        try {\n            const exportData = {\n                version: '1.0',\n                exportedAt: new Date().toISOString(),\n                count: checklists.length,\n                checklists: checklists.map(checklist => ({\n                    title: checklist.title,\n                    description: checklist.description || '',\n                    sections: checklist.sections || [],\n                    tags: checklist.tags || [],\n                    metadata: {\n                        totalItems: checklist.total_items || 0,\n                        completedItems: checklist.completed_items || 0,\n                        createdAt: checklist.created_at,\n                        updatedAt: checklist.updated_at\n                    }\n                }))\n            };\n            \n            const blob = new Blob([JSON.stringify(exportData, null, 2)], {\n                type: 'application/json'\n            });\n            \n            const url = URL.createObjectURL(blob);\n            const a = document.createElement('a');\n            a.href = url;\n            a.download = filename;\n            \n            document.body.appendChild(a);\n            a.click();\n            document.body.removeChild(a);\n            \n            URL.revokeObjectURL(url);\n            \n            return true;\n        } catch (error) {\n            console.error('Multiple export failed:', error);\n            throw new Error('Failed to export checklists');\n        }\n    }\n    \n    /**\n     * Export checklist as CSV\n     */\n    static async exportAsCSV(checklist, filename) {\n        try {\n            const csvData = this.convertToCSV(checklist);\n            \n            const blob = new Blob([csvData], {\n                type: 'text/csv;charset=utf-8;'\n            });\n            \n            const url = URL.createObjectURL(blob);\n            const a = document.createElement('a');\n            a.href = url;\n            a.download = filename || `${this.sanitizeFilename(checklist.title)}.csv`;\n            \n            document.body.appendChild(a);\n            a.click();\n            document.body.removeChild(a);\n            \n            URL.revokeObjectURL(url);\n            \n            return true;\n        } catch (error) {\n            console.error('CSV export failed:', error);\n            throw new Error('Failed to export as CSV');\n        }\n    }\n    \n    /**\n     * Export checklist as Markdown\n     */\n    static async exportAsMarkdown(checklist, filename) {\n        try {\n            const markdown = this.convertToMarkdown(checklist);\n            \n            const blob = new Blob([markdown], {\n                type: 'text/markdown;charset=utf-8;'\n            });\n            \n            const url = URL.createObjectURL(blob);\n            const a = document.createElement('a');\n            a.href = url;\n            a.download = filename || `${this.sanitizeFilename(checklist.title)}.md`;\n            \n            document.body.appendChild(a);\n            a.click();\n            document.body.removeChild(a);\n            \n            URL.revokeObjectURL(url);\n            \n            return true;\n        } catch (error) {\n            console.error('Markdown export failed:', error);\n            throw new Error('Failed to export as Markdown');\n        }\n    }\n    \n    /**\n     * Validate import data structure\n     */\n    static validateImportData(data) {\n        // Check if it's a single checklist or multiple\n        if (data.checklist) {\n            // Single checklist format\n            return this.validateSingleChecklist(data.checklist);\n        } else if (data.checklists && Array.isArray(data.checklists)) {\n            // Multiple checklists format\n            return {\n                type: 'multiple',\n                count: data.checklists.length,\n                checklists: data.checklists.map(cl => this.validateSingleChecklist(cl))\n            };\n        } else {\n            // Try to validate as direct checklist object\n            return this.validateSingleChecklist(data);\n        }\n    }\n    \n    /**\n     * Validate single checklist data\n     */\n    static validateSingleChecklist(checklist) {\n        if (!checklist || typeof checklist !== 'object') {\n            throw new Error('Invalid checklist data');\n        }\n        \n        // Required fields\n        if (!checklist.title || typeof checklist.title !== 'string') {\n            throw new Error('Checklist must have a title');\n        }\n        \n        // Validate sections\n        const sections = checklist.sections || [];\n        if (!Array.isArray(sections)) {\n            throw new Error('Sections must be an array');\n        }\n        \n        // Validate each section\n        sections.forEach((section, index) => {\n            if (!section.title || typeof section.title !== 'string') {\n                throw new Error(`Section ${index + 1} must have a title`);\n            }\n            \n            const items = section.items || [];\n            if (!Array.isArray(items)) {\n                throw new Error(`Section ${index + 1} items must be an array`);\n            }\n            \n            items.forEach((item, itemIndex) => {\n                if (!item.text || typeof item.text !== 'string') {\n                    throw new Error(`Item ${itemIndex + 1} in section ${index + 1} must have text`);\n                }\n            });\n        });\n        \n        return {\n            type: 'single',\n            checklist: {\n                title: checklist.title,\n                description: checklist.description || '',\n                sections: sections,\n                tags: Array.isArray(checklist.tags) ? checklist.tags : []\n            }\n        };\n    }\n    \n    /**\n     * Convert checklist to CSV format\n     */\n    static convertToCSV(checklist) {\n        const rows = [\n            ['Section', 'Item', 'Completed', 'Tags', 'Description']\n        ];\n        \n        checklist.sections?.forEach(section => {\n            section.items?.forEach(item => {\n                const tags = item.tags?.map(tag => tag.name).join('; ') || '';\n                rows.push([\n                    this.escapeCSV(section.title),\n                    this.escapeCSV(item.text),\n                    item.completed ? 'Yes' : 'No',\n                    this.escapeCSV(tags),\n                    this.escapeCSV(item.description || '')\n                ]);\n            });\n        });\n        \n        return rows.map(row => row.join(',')).join('\\n');\n    }\n    \n    /**\n     * Convert checklist to Markdown format\n     */\n    static convertToMarkdown(checklist) {\n        let markdown = `# ${checklist.title}\\n\\n`;\n        \n        if (checklist.description) {\n            markdown += `${checklist.description}\\n\\n`;\n        }\n        \n        checklist.sections?.forEach(section => {\n            markdown += `## ${section.title}\\n\\n`;\n            \n            section.items?.forEach(item => {\n                const checkbox = item.completed ? '[x]' : '[ ]';\n                markdown += `- ${checkbox} ${item.text}`;\n                \n                if (item.tags && item.tags.length > 0) {\n                    const tags = item.tags.map(tag => `${tag.emoji || ''}${tag.name}`).join(' ');\n                    markdown += ` (${tags})`;\n                }\n                \n                markdown += '\\n';\n                \n                if (item.description) {\n                    markdown += `  ${item.description}\\n`;\n                }\n            });\n            \n            markdown += '\\n';\n        });\n        \n        return markdown;\n    }\n    \n    /**\n     * Escape CSV field\n     */\n    static escapeCSV(field) {\n        if (typeof field !== 'string') {\n            field = String(field);\n        }\n        \n        // If field contains comma, quote, or newline, wrap in quotes and escape internal quotes\n        if (field.includes(',') || field.includes('\"') || field.includes('\\n')) {\n            return `\"${field.replace(/\"/g, '\"\"')}\"`;\n        }\n        \n        return field;\n    }\n    \n    /**\n     * Sanitize filename\n     */\n    static sanitizeFilename(filename) {\n        // Remove or replace invalid filename characters\n        return filename\n            .replace(/[<>:\"/\\\\|?*]/g, '_')\n            .replace(/\\s+/g, '-')\n            .toLowerCase()\n            .substring(0, 50); // Limit length\n    }\n    \n    /**\n     * Get file extension based on export type\n     */\n    static getFileExtension(exportType) {\n        const extensions = {\n            json: 'json',\n            csv: 'csv',\n            markdown: 'md',\n            text: 'txt'\n        };\n        \n        return extensions[exportType] || 'json';\n    }\n    \n    /**\n     * Get MIME type based on export type\n     */\n    static getMimeType(exportType) {\n        const mimeTypes = {\n            json: 'application/json',\n            csv: 'text/csv',\n            markdown: 'text/markdown',\n            text: 'text/plain'\n        };\n        \n        return mimeTypes[exportType] || 'application/json';\n    }\n    \n    /**\n     * Show export options modal\n     */\n    static async showExportModal(checklist, onExport) {\n        // This would integrate with the Modal system\n        // For now, return the export functions\n        return {\n            json: () => this.exportChecklist(checklist),\n            csv: () => this.exportAsCSV(checklist),\n            markdown: () => this.exportAsMarkdown(checklist)\n        };\n    }\n    \n    /**\n     * Batch export multiple checklists with progress\n     */\n    static async batchExport(checklists, format = 'json', onProgress) {\n        const total = checklists.length;\n        const results = [];\n        \n        for (let i = 0; i < total; i++) {\n            try {\n                const checklist = checklists[i];\n                const filename = `${this.sanitizeFilename(checklist.title)}.${this.getFileExtension(format)}`;\n                \n                switch (format) {\n                    case 'json':\n                        await this.exportChecklist(checklist, filename);\n                        break;\n                    case 'csv':\n                        await this.exportAsCSV(checklist, filename);\n                        break;\n                    case 'markdown':\n                        await this.exportAsMarkdown(checklist, filename);\n                        break;\n                }\n                \n                results.push({ success: true, checklist: checklist.title });\n            } catch (error) {\n                results.push({ \n                    success: false, \n                    checklist: checklists[i].title, \n                    error: error.message \n                });\n            }\n            \n            // Report progress\n            if (onProgress) {\n                onProgress({\n                    current: i + 1,\n                    total,\n                    progress: ((i + 1) / total) * 100,\n                    checklist: checklists[i].title\n                });\n            }\n            \n            // Add small delay to prevent overwhelming the browser\n            await new Promise(resolve => setTimeout(resolve, 100));\n        }\n        \n        return results;\n    }\n}"