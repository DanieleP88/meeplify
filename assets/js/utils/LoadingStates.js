/**
 * Loading States Utility
 * Manages loading indicators and skeleton screens
 */
export class LoadingStates {
    /**
     * Show loading spinner in element\n     */\n    static showSpinner(element, message = 'Loading...') {\n        element.innerHTML = `\n            <div class=\"loading-spinner-container\">\n                <div class=\"loading-spinner\"></div>\n                <p class=\"loading-message\">${this.escapeHtml(message)}</p>\n            </div>\n        `;\n    }\n    \n    /**\n     * Show skeleton loading state\n     */\n    static showSkeleton(element, type = 'cards') {\n        switch (type) {\n            case 'cards':\n                element.innerHTML = this.getCardSkeletons();\n                break;\n            case 'list':\n                element.innerHTML = this.getListSkeletons();\n                break;\n            case 'form':\n                element.innerHTML = this.getFormSkeletons();\n                break;\n            default:\n                element.innerHTML = this.getGenericSkeleton();\n        }\n    }\n    \n    /**\n     * Show inline loading button state\n     */\n    static showButtonLoading(button, loadingText = 'Loading...') {\n        const originalContent = button.innerHTML;\n        button.dataset.originalContent = originalContent;\n        button.disabled = true;\n        \n        button.innerHTML = `\n            <div class=\"button-loading\">\n                <div class=\"button-spinner\"></div>\n                <span>${this.escapeHtml(loadingText)}</span>\n            </div>\n        `;\n    }\n    \n    /**\n     * Hide button loading state\n     */\n    static hideButtonLoading(button) {\n        if (button.dataset.originalContent) {\n            button.innerHTML = button.dataset.originalContent;\n            delete button.dataset.originalContent;\n        }\n        button.disabled = false;\n    }\n    \n    /**\n     * Show progress bar\n     */\n    static showProgress(element, progress = 0, message = '') {\n        element.innerHTML = `\n            <div class=\"progress-container\">\n                ${message ? `<p class=\"progress-message\">${this.escapeHtml(message)}</p>` : ''}\n                <div class=\"progress-bar-container\">\n                    <div class=\"progress-bar\">\n                        <div class=\"progress-fill\" style=\"width: ${Math.max(0, Math.min(100, progress))}%\"></div>\n                    </div>\n                    <span class=\"progress-text\">${Math.round(progress)}%</span>\n                </div>\n            </div>\n        `;\n    }\n    \n    /**\n     * Update progress bar\n     */\n    static updateProgress(element, progress, message = '') {\n        const progressFill = element.querySelector('.progress-fill');\n        const progressText = element.querySelector('.progress-text');\n        const progressMessage = element.querySelector('.progress-message');\n        \n        if (progressFill) {\n            progressFill.style.width = `${Math.max(0, Math.min(100, progress))}%`;\n        }\n        \n        if (progressText) {\n            progressText.textContent = `${Math.round(progress)}%`;\n        }\n        \n        if (progressMessage && message) {\n            progressMessage.textContent = message;\n        }\n    }\n    \n    /**\n     * Show empty state\n     */\n    static showEmptyState(element, config = {}) {\n        const {\n            title = 'No items found',\n            message = 'There are no items to display.',\n            icon = 'default',\n            actionText = null,\n            actionHandler = null\n        } = config;\n        \n        element.innerHTML = `\n            <div class=\"empty-state\">\n                <div class=\"empty-state-icon\">\n                    ${this.getEmptyStateIcon(icon)}\n                </div>\n                <h2 class=\"empty-state-title\">${this.escapeHtml(title)}</h2>\n                <p class=\"empty-state-message\">${this.escapeHtml(message)}</p>\n                ${actionText ? `<button class=\"btn btn--primary empty-state-action\">${this.escapeHtml(actionText)}</button>` : ''}\n            </div>\n        `;\n        \n        if (actionText && actionHandler) {\n            const actionBtn = element.querySelector('.empty-state-action');\n            if (actionBtn) {\n                actionBtn.addEventListener('click', actionHandler);\n            }\n        }\n    }\n    \n    /**\n     * Get card skeletons HTML\n     */\n    static getCardSkeletons(count = 6) {\n        return `\n            <div class=\"skeleton-grid\">\n                ${Array(count).fill(0).map(() => `\n                    <div class=\"skeleton-card\">\n                        <div class=\"skeleton-text\"></div>\n                        <div class=\"skeleton-text short\"></div>\n                        <div class=\"skeleton-text medium\"></div>\n                        <div style=\"margin-top: 16px;\">\n                            <div class=\"skeleton-text short\" style=\"height: 32px; border-radius: 4px;\"></div>\n                        </div>\n                    </div>\n                `).join('')}\n            </div>\n        `;\n    }\n    \n    /**\n     * Get list skeletons HTML\n     */\n    static getListSkeletons(count = 8) {\n        return `\n            <div class=\"skeleton-list\">\n                ${Array(count).fill(0).map(() => `\n                    <div class=\"skeleton-list-item\">\n                        <div class=\"skeleton-avatar\"></div>\n                        <div class=\"skeleton-content\">\n                            <div class=\"skeleton-text\"></div>\n                            <div class=\"skeleton-text short\"></div>\n                        </div>\n                    </div>\n                `).join('')}\n            </div>\n        `;\n    }\n    \n    /**\n     * Get form skeletons HTML\n     */\n    static getFormSkeletons() {\n        return `\n            <div class=\"skeleton-form\">\n                <div class=\"skeleton-form-group\">\n                    <div class=\"skeleton-text short\" style=\"height: 20px; margin-bottom: 8px;\"></div>\n                    <div class=\"skeleton-text\" style=\"height: 40px;\"></div>\n                </div>\n                <div class=\"skeleton-form-group\">\n                    <div class=\"skeleton-text short\" style=\"height: 20px; margin-bottom: 8px;\"></div>\n                    <div class=\"skeleton-text\" style=\"height: 40px;\"></div>\n                </div>\n                <div class=\"skeleton-form-group\">\n                    <div class=\"skeleton-text short\" style=\"height: 20px; margin-bottom: 8px;\"></div>\n                    <div class=\"skeleton-text\" style=\"height: 100px;\"></div>\n                </div>\n                <div style=\"margin-top: 24px;\">\n                    <div class=\"skeleton-text short\" style=\"height: 36px; border-radius: 4px;\"></div>\n                </div>\n            </div>\n        `;\n    }\n    \n    /**\n     * Get generic skeleton HTML\n     */\n    static getGenericSkeleton() {\n        return `\n            <div class=\"skeleton-content\">\n                <div class=\"skeleton-text\"></div>\n                <div class=\"skeleton-text medium\"></div>\n                <div class=\"skeleton-text short\"></div>\n                <div style=\"margin: 24px 0;\">\n                    <div class=\"skeleton-text\"></div>\n                    <div class=\"skeleton-text medium\"></div>\n                </div>\n                <div class=\"skeleton-text short\"></div>\n            </div>\n        `;\n    }\n    \n    /**\n     * Get empty state icon\n     */\n    static getEmptyStateIcon(type) {\n        const icons = {\n            default: `\n                <svg viewBox=\"0 0 64 64\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n                    <rect width=\"64\" height=\"64\" rx=\"12\" fill=\"currentColor\" opacity=\"0.1\"/>\n                    <path d=\"M20 24h24v3H20v-3zm0 6h24v3H20v-3zm0 6h16v3H20v-3z\" fill=\"currentColor\"/>\n                </svg>\n            `,\n            search: `\n                <svg viewBox=\"0 0 64 64\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n                    <rect width=\"64\" height=\"64\" rx=\"12\" fill=\"currentColor\" opacity=\"0.1\"/>\n                    <path d=\"M28 20a8 8 0 100 16 8 8 0 000-16zm0 2a6 6 0 110 12 6 6 0 010-12z\" fill=\"currentColor\"/>\n                    <path d=\"M33.5 33.5l8 8-1.5 1.5-8-8 1.5-1.5z\" fill=\"currentColor\"/>\n                </svg>\n            `,\n            error: `\n                <svg viewBox=\"0 0 64 64\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n                    <rect width=\"64\" height=\"64\" rx=\"12\" fill=\"currentColor\" opacity=\"0.1\"/>\n                    <path d=\"M32 20c-6.627 0-12 5.373-12 12s5.373 12 12 12 12-5.373 12-12-5.373-12-12-12zm0 2c5.523 0 10 4.477 10 10s-4.477 10-10 10-10-4.477-10-10 4.477-10 10-10z\" fill=\"currentColor\"/>\n                    <path d=\"M30 28h4v8h-4v-8zm0 10h4v4h-4v-4z\" fill=\"currentColor\"/>\n                </svg>\n            `\n        };\n        \n        return icons[type] || icons.default;\n    }\n    \n    /**\n     * Escape HTML content\n     */\n    static escapeHtml(text) {\n        const div = document.createElement('div');\n        div.textContent = text;\n        return div.innerHTML;\n    }\n}\n\n/**\n * Real-time updates utility\n */\nexport class RealTimeUpdates {\n    constructor(options = {}) {\n        this.updateInterval = options.updateInterval || 30000; // 30 seconds\n        this.onUpdate = options.onUpdate || (() => {});\n        this.onError = options.onError || (() => {});\n        \n        this.isActive = false;\n        this.intervalId = null;\n        this.lastUpdateTime = null;\n    }\n    \n    /**\n     * Start real-time updates\n     */\n    start() {\n        if (this.isActive) return;\n        \n        this.isActive = true;\n        this.lastUpdateTime = Date.now();\n        \n        // Initial update\n        this.performUpdate();\n        \n        // Set up interval\n        this.intervalId = setInterval(() => {\n            this.performUpdate();\n        }, this.updateInterval);\n        \n        // Listen for visibility changes\n        document.addEventListener('visibilitychange', this.handleVisibilityChange.bind(this));\n    }\n    \n    /**\n     * Stop real-time updates\n     */\n    stop() {\n        if (!this.isActive) return;\n        \n        this.isActive = false;\n        \n        if (this.intervalId) {\n            clearInterval(this.intervalId);\n            this.intervalId = null;\n        }\n        \n        document.removeEventListener('visibilitychange', this.handleVisibilityChange);\n    }\n    \n    /**\n     * Perform update\n     */\n    async performUpdate() {\n        try {\n            await this.onUpdate();\n            this.lastUpdateTime = Date.now();\n        } catch (error) {\n            console.error('Real-time update failed:', error);\n            this.onError(error);\n        }\n    }\n    \n    /**\n     * Handle visibility change\n     */\n    handleVisibilityChange() {\n        if (document.hidden) {\n            // Page is hidden, pause updates\n            this.pause();\n        } else {\n            // Page is visible, resume updates\n            this.resume();\n            \n            // Check if we need an immediate update\n            const timeSinceLastUpdate = Date.now() - this.lastUpdateTime;\n            if (timeSinceLastUpdate > this.updateInterval) {\n                this.performUpdate();\n            }\n        }\n    }\n    \n    /**\n     * Pause updates\n     */\n    pause() {\n        if (this.intervalId) {\n            clearInterval(this.intervalId);\n            this.intervalId = null;\n        }\n    }\n    \n    /**\n     * Resume updates\n     */\n    resume() {\n        if (this.isActive && !this.intervalId) {\n            this.intervalId = setInterval(() => {\n                this.performUpdate();\n            }, this.updateInterval);\n        }\n    }\n    \n    /**\n     * Trigger immediate update\n     */\n    triggerUpdate() {\n        return this.performUpdate();\n    }\n    \n    /**\n     * Get time since last update\n     */\n    getTimeSinceLastUpdate() {\n        return this.lastUpdateTime ? Date.now() - this.lastUpdateTime : null;\n    }\n}"